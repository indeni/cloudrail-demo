# This is a sample gitlab CI configuration showing how to use Cloudrail
# to test Terraform content.

# Based on example: https://gitlab.com/gitlab-org/configure/examples/gitlab-terraform-aws/-/blob/master/.gitlab-ci.yml

# The example TF code we use here only works in v0.13, however Cloudrail supports 0.14 as well.
image: registry.gitlab.com/gitlab-org/terraform-images/releases/0.13
variables:
  # We're picking a specific test case to run against.
  TEST_ROOT: ${CI_PROJECT_DIR}/test/aws/terraform/ec2_role_share_rule/public_and_private_ec2_same_role

before_script:
  - cd ${TEST_ROOT}

stages:
  - init_and_plan
  - cloudrail

# Cloudrail requires a Terraform plan as an input, so we must create a plan first.
init_and_plan:
  stage: init_and_plan
  script:
    - terraform init
    - terraform plan -out=plan.out
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - ./**/plan.out
      - ./**/.terraform

# This will run Cloudrail and produce a SAST report according to GitLab's requirements. The idea is that if there are
# any rules that are set to MANDATE, and they find violations, we will have results listed in the GitLab-SAST output.
# This will then cause GitLab to stop the pipeline and provide the list of violations found,
# allowing dev's to fix the violations.
# Note that Cloudrail has other output formats as well, but GitLab-SAST is the one intended for GitLab use.
# Also note that rules that are set to ADVISE (which is the default) will _not_ be included in the output by default.
cloudrail:
  stage: cloudrail
  image: indeni/cloudrail-cli:latest
  script:
    - cloudrail run --tf-plan plan.out --directory . --api-key ${CLOUDRAIL_API_KEY} --origin ci --build-link "$CI_PROJECT_URL/-/jobs/$CI_JOB_ID"  --execution-source-identifier "$CI_COMMIT_BRANCH - $CI_JOB_ID" --output-format json-gitlab-sast --output-file ${CI_PROJECT_DIR}/cloudrail-sast-report.json --auto-approve
  artifacts:
    reports:
      sast: cloudrail-sast-report.json
    paths:
      - cloudrail-sast-report.json



